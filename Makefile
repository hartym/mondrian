# Generated by Medikit 0.5.7 on 2018-03-11.
# All changes will be overriden.
# Edit Projectfile and run “make update” (or “medikit update”) to regenerate.

PACKAGE ?= mondrian
PYTHON ?= $(shell which python)
PYTHON_BASENAME ?= $(shell basename $(PYTHON))
PYTHON_DIRNAME ?= $(shell dirname $(PYTHON))
PYTHON_REQUIREMENTS_FILE ?= requirements.txt
PYTHON_REQUIREMENTS_DEV_FILE ?= requirements-dev.txt
QUICK ?= 
PIP ?= $(PYTHON_DIRNAME)/pip
PIP_INSTALL_OPTIONS ?= 
VERSION ?= $(shell git describe 2>/dev/null || git rev-parse --short HEAD)
PYTEST ?= $(PYTHON_DIRNAME)/pytest
PYTEST_OPTIONS ?= --capture=no --cov=$(PACKAGE) --cov-report html
SPHINX_BUILD ?= $(PYTHON_DIRNAME)/sphinx-build
SPHINX_OPTIONS ?= 
SPHINX_SOURCEDIR ?= docs
SPHINX_BUILDDIR ?= $(SPHINX_SOURCEDIR)/_build
YAPF ?= $(PYTHON) -m yapf
YAPF_OPTIONS ?= -rip

.PHONY: $(SPHINX_SOURCEDIR) clean format help install install-dev test update update-requirements

install:   ## Installs the local project dependencies.
	if [ -z "$(QUICK)" ]; then \
	    $(PIP) install $(PIP_INSTALL_OPTIONS) -U pip wheel ; \
	    $(PIP) install $(PIP_INSTALL_OPTIONS) -U -r $(PYTHON_REQUIREMENTS_FILE) ; \
	fi

install-dev:   ## Installs the local project dependencies, including development-only libraries.
	if [ -z "$(QUICK)" ]; then \
	    $(PIP) install $(PIP_INSTALL_OPTIONS) -U pip wheel ; \
	    $(PIP) install $(PIP_INSTALL_OPTIONS) -U -r $(PYTHON_REQUIREMENTS_DEV_FILE) ; \
	fi

clean:   ## Cleans up the local mess.
	rm -rf build dist *.egg-info

update:   ## Update project artifacts using medikit, after installing it eventually.
	python -c 'import medikit; print(medikit.__version__)' || pip install medikit;
	$(PYTHON) -m medikit update

update-requirements:   ## Remove requirements files and update project artifacts using medikit, after installing it eventually.
	rm -rf requirements*.txt
	$(MAKE) update

test: install-dev  ##
	$(PYTEST) $(PYTEST_OPTIONS) tests

$(SPHINX_SOURCEDIR): install-dev  ##
	$(SPHINX_BUILD) -b html -D latex_paper_size=a4 $(SPHINX_OPTIONS) $(SPHINX_SOURCEDIR) $(SPHINX_BUILDDIR)/html

format: install-dev  ##
	$(YAPF) $(YAPF_OPTIONS) .
	$(YAPF) $(YAPF_OPTIONS) Projectfile

help:   ##
	@echo "Available commands:"
	@echo
	@grep -E '^[a-zA-Z_-]+:.*?##[\s]?.*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?##"}; {printf "    make \033[36m%-30s\033[0m %s\n", $$1, $$2}'
	@echo
